syntax = "proto3";
package authzed.api.v0;

option go_package = "github.com/authzed/authzed-go/proto/authzed/api/v0";
option java_package = "com.authzed.api.v0";

import "validate/validate.proto";

import "authzed/api/v0/core.proto";

option deprecated = true;

service ACLService {
  rpc Read(ReadRequest) returns (ReadResponse) {
    option deprecated = true;
  }

  rpc Write(WriteRequest) returns (WriteResponse) {
    option deprecated = true;
  }

  rpc Check(CheckRequest) returns (CheckResponse) {
    option deprecated = true;
  }

  rpc ContentChangeCheck(ContentChangeCheckRequest) returns (CheckResponse) {
    option deprecated = true;
  }

  rpc Expand(ExpandRequest) returns (ExpandResponse) {
    option deprecated = true;
  }

  rpc Lookup(LookupRequest) returns (LookupResponse) {
    option deprecated = true;
  }
}

message RelationTupleFilter {
  option deprecated = true;

  enum Filter {
    UNKNOWN = 0;
    OBJECT_ID = 1;
    RELATION = 2;
    USERSET = 4;
  }
  string namespace = 1 [ (validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,61}[a-z0-9]/)?[a-z][a-z0-9_]{1,62}[a-z0-9]$",
    max_bytes : 128,
  } ];

  // Setting any of these fields requires the appropriate filter type to be
  // added to the filters list as well
  string object_id = 2 [ (validate.rules).string = {
    pattern : "^([a-zA-Z0-9_][a-zA-Z0-9/_-]{0,127})?$",
    max_bytes : 128,
  } ];

  string relation = 3 [ (validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,62}[a-z0-9])?$",
    max_bytes : 64,
  } ];

  ObjectAndRelation userset = 5;

  repeated Filter filters = 6
      [ (validate.rules).repeated .items.enum.defined_only = true ];
}

message ReadRequest {
  option deprecated = true;

  // A read request specifies one or multiple tuplesets and an optional zookie.
  repeated RelationTupleFilter tuplesets = 1 [
    (validate.rules).repeated .min_items = 1,
    (validate.rules).repeated .items.message.required = true
  ];
  Zookie at_revision = 2;
}

message ReadResponse {
  option deprecated = true;

  message Tupleset { repeated RelationTuple tuples = 1; }

  repeated Tupleset tuplesets = 1;
  Zookie revision = 2;
}

message WriteRequest {
  option deprecated = true;

  // Clients may modify a single relation tuple to add or remove an ACL. They
  // may also modify all tuples related to an object via a read-modify-write
  // process with optimistic concurrency control [21] that uses a read RPC
  // followed by a write RPC:
  //
  // 1. Read all relation tuples of an object, including a per-object “lock”
  //    tuple.
  // 2. Generate the tuples to write or delete. Send the writes, along with a
  //    touch on the lock tuple, to Zanzibar, with the condition that the
  //    writes will be committed only if the lock tuple has not been modified
  //    since the read.
  // 3. If the write condition is not met, go back to step 1.
  //    The lock tuple is just a regular relation tuple used by clients to
  //    detect write races.
  //
  // The lock tuple is just a regular relation tuple used by clients to
  // detect write races.
  repeated RelationTuple write_conditions = 1
      [ (validate.rules).repeated .items.message.required =
            true ]; // To be bounded by configuration
  repeated RelationTupleUpdate updates = 2
      [ (validate.rules).repeated .items.message.required = true ];
}

message WriteResponse {
  option deprecated = true;

  Zookie revision = 1;
}

message CheckRequest {
  option deprecated = true;

  // A check request specifies a userset, represented by ⟨object#relation⟩,
  // a putative user, often represented by an authentication token, and a
  // zookie corresponding to the desired object version.
  ObjectAndRelation test_userset = 1
      [ (validate.rules).message.required = true ];
  User user = 2 [ (validate.rules).message.required =
                      true ]; // TODO swap for putative user
  Zookie at_revision = 3;
}

message ContentChangeCheckRequest {
  option deprecated = true;

  // To authorize application content modifications, our clients send a special
  // type of check request, a content-change check. A content-change check
  // request does not carry a zookie and is evaluated at the latest snapshot.
  ObjectAndRelation test_userset = 1
      [ (validate.rules).message.required = true ];
  User user = 2 [ (validate.rules).message.required =
                      true ]; // TODO swap for a putative user
}

message CheckResponse {
  option deprecated = true;

  enum Membership {
    UNKNOWN = 0;
    NOT_MEMBER = 1;
    MEMBER = 2;
  }
  bool is_member = 1;
  Zookie revision = 2;
  Membership membership = 3;
}

message ExpandRequest {
  option deprecated = true;

  // The Expand API returns the effective userset given an ⟨object#relation⟩
  // pair and an optional zookie. Unlike the Read API, Expand follows indirect
  // references expressed through userset rewrite rules.
  ObjectAndRelation userset = 1 [ (validate.rules).message.required = true ];
  Zookie at_revision = 2;
}

message ExpandResponse {
  option deprecated = true;

  // The result is represented by a userset tree whose leaf nodes are user IDs
  // or usersets pointing to other ⟨object#relation⟩ pairs, and intermediate
  // nodes represent union, intersection, or exclusion operators.
  RelationTupleTreeNode tree_node = 1;
  Zookie revision = 3;
}

message LookupRequest {
  option deprecated = true;

  RelationReference object_relation = 1 [ (validate.rules).message.required = true ];
  ObjectAndRelation user = 2 [ (validate.rules).message.required = true ];
  Zookie at_revision = 3;
  string page_reference = 4;
  uint32 limit = 5;
}

message LookupResponse {
  option deprecated = true;

  repeated string resolved_object_ids = 1;
  string next_page_reference = 2;
  Zookie revision = 3;
}
